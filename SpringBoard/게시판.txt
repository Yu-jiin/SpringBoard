	게시판.txt
	
	- DB
		DB생성, 계정생성, 테이블 설계, 테이블 더미데이터 생성
	- Spring MVC
		패키지 구조 설계, 개발환경 구성(빌드 도구 MAVEN), 컨트롤러, 서비스, DAO 설계, 테스트 파일 생성
	- 화면 (view)
		뷰 페이지 형태 설정 
		
		
	p.83 커넥션풀 : DB 연결정보를 미리 생성 / 대여 
		=> HikariCP - 스프링부트에서도 사용
		
	
	* 프로젝트 패키지 구조
		- 계층형 구조 : 각각의 객체별로 따로 관리(Controller, Service, Persistence)
			장점 :: 프로젝트에 대한 이해도가 낮음 => 구조파악이 쉬움 
			단점 :: 클래스가 많아지면 복잡, 모듈별로 분리가 어려움 
			
		=>> 프로젝트의 복잡도가 낮고, 기능이 적은 프로젝트 
		    기능을 특정 기준을 바탕으로 구분하기 어려운 경우 
			해당 기능을 별도의 모듈로 분리할 가능성이 없는 경우
		____________________________________________________________________________________
		
		- 도메인형 구조 : 도메인을 중심으로 따로 관리 (Member.Controller, Member.Service, Member.Persistence)
			장점 :: 모듈별로 구분이 쉬움 즉, 분리가 쉽다
			단점 :: 프로젝트에 대한 이해도가 낮으면, 구조파악이 힘들다	
					개인적인 성향에 따른 구분이기 때문에 기준이 모호함
					* 패키지간의 순환참조 가능성이 있음 
		
		=>> 프로젝트의 복잡도가 높고, 하나의 계층에 포함되는 클래스가 많은 경우
		    기능별로 명확한 구분이 가능한 경우, 추후 별도로 모듈 분리가 가능한 경우 
		
		
		
	* 컨트롤러 설계 
		- 공통적인 URI 경로 / 각 기능별 URI 경로 설계 
		- 각 URI의 호출방법 결정 (GET/POST)
		- 각 기능별 결과처리 (뷰 출력, 리다이렉트)
		- 예외페이지 
		
		=> 컨트롤러를 구분하는 기준은 "도메인"객체 (DB Table)  테이블 개수 == 컨트롤러 개수
	_____________________________________________________________________________________________
	
		* 공통 URI : /board 로 할거야 !
		* 호출방식 : GET  - 사용자 정보입력, 조회, 출력
					 POST - 데이터를 처리 (쓰기,수정,삭제)
					 
					 
		* 기능별 URI 
				글쓰기GET   : /board/register  
				글쓰기POST  : /board/register
				리스트GET   : /board/list
				본문읽기GET : /board/read?bno=000
				본문수정GET : /board/modify?bno=000 
				본문수정POST: /board/modify
				본문삭제POST: /board/remove?bno=000
				
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		
		
		
		
		
		